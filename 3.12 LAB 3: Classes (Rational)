#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <cctype> 
#include <sstream>

using namespace std;

// Rational Class declaration
class Rational {
   private:
      int numerator;
      int denominator; 
   public:
      Rational();
      explicit Rational(int numer); 
      Rational(int numer,int denom); 
      Rational add(const Rational &B) const; 
      Rational subtract(const Rational &B) const; 
      Rational multiply(const Rational &B) const; 
      Rational divide(const Rational &B) const;
      void simplify();
      void display() const;
   private:
      int gcd(int a, int b) const;
};

// constructors based off the user input 

Rational::Rational(){
numerator = 0;
denominator =1;
}
Rational::Rational(int numer){
numerator =numer;
denominator = 1;

}
Rational::Rational(int numer, int denom){
 numerator = numer;
 denominator = denom;
}


//Based off of the user input do the following operatorations: add, sub, multiply, and divide

 Rational Rational::add(const Rational &B)const {
   Rational result;
   result.numerator = (this->numerator * B.denominator + this->denominator * B.numerator);
   result.denominator = (this->denominator * B.denominator);
   return result;

}
  Rational Rational::subtract(const Rational &B) const  {
   Rational result;
   result.numerator = (this->numerator * B.denominator - this->denominator * B.numerator);
   result.denominator = (this->denominator * B.denominator);
   return result;
}
  Rational Rational::multiply(const Rational &B) const{
   Rational result;
   result.numerator = (this->numerator * B.numerator);
   result.denominator = (this->denominator * B.denominator);
   return result;
}
  Rational Rational::divide(const Rational &B) const {
   Rational result;
   result.numerator = (this->numerator * B.denominator);
   result.denominator = (this->denominator * B.numerator);
   return result;
}

void Rational::simplify(){
   int GCD = gcd(numerator, denominator);
   numerator /= GCD;
   denominator /= GCD;
}

int Rational::gcd(int n, int d) const{
   if(d == 0){
      return abs(n);
   }
   return gcd(d, n % d);
}

void Rational::display() const{
   cout << this-> numerator << " / " << this-> denominator;
}




// Do not change any of the code below this line!!

Rational getRational();
void displayResult(const string &, const Rational &, const Rational&, const Rational&);

int main() {
   Rational A, B, result;
   char choice;
   
   cout << "Enter Rational A:" << endl;
   A = getRational(); // first calling of a function step 1!
   cout << endl;
   
   cout << "Enter Rational B:" << endl;
   B = getRational();
   cout << endl;
   
   cout << "Enter Operation:" << endl
      << "a - Addition (A + B)" << endl
      << "s - Subtraction (A - B)" << endl
      << "m - Multiplication (A * B)" << endl
      << "d - Division (A / B)" << endl
      << "y - Simplify A" << endl;
   cin >> choice;
   cout << endl;
   
   if (choice == 'a') {
      result = A.add(B);
      displayResult("+", A, B, result);
   } else if (choice == 's') {
      result = A.subtract(B);
      displayResult("-", A, B, result);
   } else if (choice == 'm') {
      result = A.multiply(B);
      displayResult("*", A, B, result);
   } else if (choice == 'd') {
      result = A.divide(B);
      displayResult("/", A, B, result);
   } else if (choice == 'y') {
      A.simplify();
      A.display();
   } else {
      cout << "Unknown Operation";
   }
   cout << endl;
   
   return 0;
}


Rational getRational() { // after step 1, look foor other function calls 
   int choice;
   int numer, denom;
   
   cout << "Which Rational constructor? (Enter 2, 1, or 0)" << endl
      << "2 - 2 parameters (numerator & denominator)" << endl
      << "1 - 1 parameter (numerator)" << endl
      << "0 - 0 parameters (default)" << endl;
   cin >> choice;
   cout << endl;
   
   if (choice == 2) {
      cout << "numerator? ";
      cin >> numer;
      cout << endl;
      cout << "denominator? ";
      cin >> denom;
      cout << endl;
      return Rational(numer, denom); // step 2 function is called!
   } else if (choice == 1) {
      cout << "numerator? ";
      cin >> numer;
      cout << endl;
      return Rational(numer); // step 3 another funtion is called!
   } else {
      return Rational(); // step 4 another function is called!
   }
}

void displayResult(const string &op, const Rational &lhs, const Rational&rhs, const Rational &result) {
   cout << "(";
   lhs.display();
   cout << ") " << op << " (";
   rhs.display();
   cout << ") = (";
   result.display();
   cout << ")";
}

