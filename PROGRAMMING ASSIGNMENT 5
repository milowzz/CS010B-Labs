//IntList.CPP/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "IntList.h"
#ifndef INTLIST
#define INTLIST
#include <iostream>
using namespace std;

IntList::IntList(){

    head = nullptr;
    tail = nullptr;

}

IntList::~IntList(){
    clear();
}

void IntList::pop_front(){
    if (!empty()) {

        IntNode* temp = head;
        head = head->next;
        // Deallocate memory for the saved node
        delete temp;

        // If head is now nullptr, update tail to nullptr as well
        if (head == nullptr) {
        tail = nullptr;
        }
       
    }

    else {
          return;
    }
}


const int& IntList::front() const{
    if(empty())
    {
        exit(1);
    }
    return head->value;

}

const int& IntList::back() const{
    if(empty()){
        exit(1);
    }

    IntNode* current = head;
        while (current->next != nullptr) {
            current = current->next;
        }

        // Returning a reference to the last value
        return current->value;

    
}


void IntList::push_front(int value){ //FIXME

    if(empty()){
       this->head = this->tail = new IntNode(value);
    }
    else {
        IntNode* temp = new IntNode(value);
        temp->next = this->head;
        this->head =temp;
    }
   

    /*IntNode* Newnode = new IntNode(value);
    Newnode->next = head;
    head = Newnode;

    IntNode* t = head;
    head = new IntNode(num);
    head->next = t;
    */
    
}

bool IntList::empty() const{
     return (head == nullptr && tail == nullptr);
}

void IntList::clear(){
 
while (head != nullptr) {
    pop_front();
}
head = nullptr;
tail = nullptr;






   /* while (head != nullptr) {
        IntNode* temp = head;  // Save the current head
        head = head->next;     // Move head to the next node
        delete temp;           // Deallocate memory for the saved node
    }

    // After clearing list, head and tail = nullptr
    head = nullptr;
    tail = nullptr;
    */
}

ostream & operator<<(ostream &out, const IntList &list){
  if(list.empty())
    {
        return out;
    }
   IntNode* temp = list.head;
  
   if(temp->next == nullptr)
       {
           out << temp->value;
       }
   while(temp->next != nullptr)
    {
       out << temp->value << " ";
       temp = temp->next; 
       if(temp->next == 0)
       {
           out << temp->value;
       }
    }
    
   return out; 
}

IntList::IntList(const IntList &cpy)
{
    head = nullptr;
    tail = nullptr;
    for(IntNode* t = cpy.head; t != nullptr; t = t->next)
    {
        push_back(t->value);
    }

}

IntList& IntList::operator=(const IntList &rhs)
{   
    if(this != &rhs)
    {
        clear();
    
    if(rhs.empty())
    {
        head = 0;
        tail = 0;
    }
    for(IntNode* t = rhs.head; t != nullptr; t = t->next)
    {
        push_back(t->value);
    }
    }
    return *this;
}
void IntList::push_back(int value)
{
    IntNode* t = new IntNode(value);
    if(head == nullptr)
    {
        head = t;
        tail = t;
    }
    else
    {
        IntNode* temp = head;
        while(temp != nullptr)
        {
            if(temp->next == nullptr)
            {
                temp->next = t;
                tail = t;
                break;
            }
            else
            {
                temp = temp->next;
            }
        }
    }
    
}

void IntList::selection_sort()
{
    IntNode* t = head;
    while(t != nullptr)
    {
        IntNode* m = t;
        IntNode* rep = t->next;

        while(rep != nullptr)
        {
            if(m->value > rep ->value)
            {
                m = rep;
            }
            rep = rep->next;
        }
        int temp = t->value;
        t->value = m->value;
        m->value = temp;
        
        tail = t;
        t = t->next;
    }
    
    
}
void IntList::insert_ordered(int value){
    IntNode* t = head;
    if(head == nullptr)
    {
        tail = head;
        push_back(value);
    }
    else if(head->value >= value)
    {
        tail = head;
        push_front(value);
    }
    else if(back() <= value)
    {
        push_back(value);
    }
    else
    {
        while(t != nullptr)
        {
            IntNode* nextval = t->next;
            if(t-> value < value && nextval->value > value)
            {
                IntNode* rep = new IntNode(value);
                rep->next = nextval;
                t->next = rep;
                break;
            }
            else if(t-> value == value)
            {
                IntNode* rep = new IntNode(value);
                rep->next = nextval;
                t->next = rep;
                break;
            }
            else
            {
                t = t->next;
            }
            
        }
    }
}

void IntList::remove_duplicates()
{
    IntNode* pot_copy = 0;
    IntNode* previous = head;
    for(IntNode* t = head; t != nullptr; t= t->next)
    {
        pot_copy = t->next; 
        previous = t;
        while(pot_copy!=nullptr)
        {
            if(pot_copy->value == t->value)
            {
               // cout << "match" << endl;
                IntNode* trash = pot_copy;
                
                    previous->next = pot_copy->next;
                    pot_copy = pot_copy->next;
                    delete trash;
                
                
            }
            else
            {
                pot_copy = pot_copy->next;
                previous = previous->next; 
            }
            
        }
    }
}

#endif

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//IntList.H///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef INTLIST_H
#define INTLIST_H

#include <iostream>
using namespace std;

struct IntNode {
	int value;
	IntNode *next;
	IntNode(int value) : value(value), next(nullptr) { }
};

class IntList {
 private:
	IntNode *head;
	IntNode *tail;
 public:
	IntList();
	~IntList();
	void clear();
	void push_front(int);
	void pop_front();
	bool empty() const;
	const int & front() const;
	const int & back() const;
	friend ostream & operator<<(ostream &, const IntList &);

	IntList(const IntList &cpy);
	IntList & operator=(const IntList &rhs);
	void push_back(int value);
	void selection_sort();
	void insert_ordered(int value);
	void remove_duplicates();
	
};

#endif
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//Main.CPP////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "IntList.h"

#include <iostream>
using namespace std;

int main() {
   cout << "Enter a test number(1-5): ";
	int test;
	cin >> test;
	cout << endl;
   //tests constructor, destructor, push_front, pop_front, display
   if (test == 1) {
      cout << endl;
      cout << "list1 constructor called" << endl;
      IntList list1;
      cout << "pushfront 10" << endl;
      list1.push_front(10);
      cout << "pushfront 20" << endl;
      list1.push_front(20);
      cout << "pushfront 30" << endl;
      list1.push_front(30);
      cout << "list1: " << list1 << endl;
      cout << "pop" << endl;
      list1.pop_front();
      cout << "list1: " << list1 << endl;
      cout << "pop" << endl;
      list1.pop_front();
      cout << "list1: " << list1 << endl;
      cout << "pop" << endl;
      list1.pop_front();
      cout << "list1: " << list1 << endl;
   }
   if (test == 1) {
      cout << "list1 destructor called" << endl;
   }

   //tests push_back
   if (test == 2) {
      cout << endl;
      cout << "list2 constructor called" << endl;
      IntList list2;
      cout << "pushback 10" << endl;
      list2.push_back(10);
      cout << "pushback 20" << endl;
      list2.push_back(20);
      cout << "pushback 30" << endl;
      list2.push_back(30);
      cout << "list2: " << list2 << endl;
      cout << "pop" << endl;
      list2.pop_front();
      cout << "list2: " << list2 << endl;
      cout << "pop" << endl;
      list2.pop_front();
      cout << "list2: " << list2 << endl;
      cout << "pop" << endl;
      list2.pop_front();
      cout << "list2: " << list2 << endl;
   }
   if (test == 2) {
      cout << "list2 destructor called" << endl;
   }

   //tests selection_sort
   if (test == 3) {
      cout << endl;
      cout << "list3 constructor called" << endl;
      IntList list3;
      cout << "pushfront 10" << endl;
      list3.push_front(10);
      cout << "pushfront 20" << endl;
      list3.push_front(20);
      cout << "pushfront 30" << endl;
      list3.push_front(30);
      cout << "list3: " << list3 << endl;
      cout << "selection_sort()" << endl;
      list3.selection_sort();
      cout << "list3: " << list3 << endl;
      cout << "pop" << endl;
      list3.pop_front();
      cout << "pop" << endl;
      list3.pop_front();
      cout << "pop" << endl;
      list3.pop_front();
      cout << "list3: " << list3 << endl;
      cout << "selection_sort()" << endl;
      list3.selection_sort();
      cout << "list3: " << list3 << endl;
      cout << "pushfront 10" << endl;
      list3.push_front(10);
      cout << "selection_sort()" << endl;
      list3.selection_sort();
      cout << "list3: " << list3 << endl;
      cout << "pushfront 20" << endl;
      list3.push_front(20);
      cout << "list3: " << list3 << endl;
      cout << "selection_sort()" << endl;
      list3.selection_sort();
      cout << "list3: " << list3 << endl;
   }
   if (test == 3) {
      cout << "list3 destructor called" << endl;
   }

   //tests insert_sorted
   if (test == 4) {
      cout << endl;
      cout << "list4 constructor called" << endl;
      IntList list4;
      cout << "insert 20" << endl;
      list4.insert_ordered(20);
      cout << "insert 10" << endl;
      list4.insert_ordered(10);
      cout << "insert 30" << endl;
      list4.insert_ordered(30);
      cout << "list4: " << list4 << endl;
      cout << "insert 50" << endl;
      list4.insert_ordered(50);
      cout << "list4: " << list4 << endl;
      cout << "insert 40" << endl;
      list4.insert_ordered(40);
      cout << "list4: " << list4 << endl;
      cout << "insert 11" << endl;
      list4.insert_ordered(11);
      cout << "list4: " << list4 << endl;
      cout << "insert 10" << endl;
      list4.insert_ordered(10);
      cout << "list4: " << list4 << endl;
      cout << "insert 11" << endl;
      list4.insert_ordered(11);
      cout << "list4: " << list4 << endl;
      cout << "insert 9" << endl;
      list4.insert_ordered(9);
      cout << "list4: " << list4 << endl;
      cout << "insert 50" << endl;
      list4.insert_ordered(50);
      cout << "list4: " << list4 << endl;
      cout << "insert 51" << endl;
      list4.insert_ordered(51);
      cout << "list4: " << list4 << endl;
   }
   if (test == 4) {
      cout << "list4 destructor called" << endl;
   }
   
   //tests remove_duplicates
   if (test == 5) {
      cout << endl;
      cout << "list5 constructor called" << endl;
      IntList list5;
      cout << "pushfront 10" << endl;
      list5.push_front(10);
      cout << "pushfront 20" << endl;
      list5.push_front(20);
      cout << "pushfront 10" << endl;
      list5.push_front(10);
      cout << "pushfront 30" << endl;
      list5.push_front(30);
      cout << "list5: " << list5 << endl;
      cout << "remove_duplicates()" << endl;
      list5.remove_duplicates();
      cout << "list5: " << list5 << endl;
      cout << "pushfront 10" << endl;
      list5.push_front(10);
      cout << "list5: " << list5 << endl;
      cout << "remove_duplicates()" << endl;
      list5.remove_duplicates();
      cout << "list5: " << list5 << endl;
      cout << "pushfront 20" << endl;
      list5.push_front(20);
      cout << "list5: " << list5 << endl;
      cout << "remove_duplicates()" << endl;
      list5.remove_duplicates();
      cout << "list5: " << list5 << endl;
      cout << "pushfront 20" << endl;
      list5.push_front(20);
      cout << "list5: " << list5 << endl;
      cout << "remove_duplicates()" << endl;
      list5.remove_duplicates();
      cout << "list5: " << list5 << endl;
      cout << "pushfront 20" << endl;
      list5.push_front(20);
      cout << "pushfront 20" << endl;
      list5.push_front(20);
      cout << "list5: " << list5 << endl;
      cout << "remove_duplicates()" << endl;
      list5.remove_duplicates();
      cout << "list5: " << list5 << endl;
      cout << "remove_duplicates()" << endl;
      list5.remove_duplicates();
      cout << "list5: " << list5 << endl;
      cout << "pop" << endl;
      list5.pop_front();
      cout << "pop" << endl;
      list5.pop_front();
      cout << "push_front(30)" << endl;
      list5.push_front(30);
      cout << "list5: " << list5 << endl;
      cout << "remove_duplicates()" << endl;
      list5.remove_duplicates();
      cout << "list5: " << list5 << endl;
      cout << "push_front(30)" << endl;
      list5.push_front(30);
      cout << "push_front(30)" << endl;
      list5.push_front(30);
      cout << "list5: " << list5 << endl;
      cout << "remove_duplicates()" << endl;
      list5.remove_duplicates();
      cout << "list5: " << list5 << endl;
      cout << "remove_duplicates()" << endl;
      list5.remove_duplicates();
      cout << "list5: " << list5 << endl;
      cout << "pop" << endl;
      list5.pop_front();
      cout << "list5: " << list5 << endl;
      cout << "remove_duplicates()" << endl;
      list5.remove_duplicates();
      cout << "list5: " << list5 << endl;
   }
   if (test == 5) {
      cout << "list5 destructor called" << endl;
   }
   
   /*
   * Destructor will be tested by looking at code. There is no run-time 
   * test for it. Make sure your destructor actually deletes ALL nodes, not
   * just the head and/or tail.
   */
   
   return 0;
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

