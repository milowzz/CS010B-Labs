//Main.cpp file 
#include <iostream>
#include <vector>
#include <fstream>
#include <stdlib.h>

using namespace std;

#include "Deck.h"
#include "Card.h"

bool hasPair(const vector<Card> &);

ostream & operator<<(ostream &os, const vector<Card> &theDeal);

double monteCarlo(int pairs, int numDeals);

int main () {

srand(2222);

ofstream outFS;
string filename;
string outputHands;
int numCards = 0;
int numDeals = 0;
int pairs = 0;
Deck deal;
vector <Card> theDeal;

cout << "Do you want to output all hands to a file?(Yes/No) ";
cin >> outputHands;
cout << endl;

if (outputHands == "Yes") {
cout << "Enter name of output file: ";
cin >> filename;
cout << endl;

outFS.open(filename);

if (!outFS.is_open()) {
cout << "Error opening " << filename << endl;
exit(1);
}
}

cout << "Enter number of cards per hand: ";
cin >> numCards;
cout << endl;

cout << "Enter number of deals (simulations): ";
cin >> numDeals;
cout << endl;

for (int i = 0; i < numDeals; ++i) {
deal.shuffleDeck();
theDeal.clear();
for (int j = 0; j < numCards; ++j) {
theDeal.push_back(deal.dealCard());
}
if (hasPair(theDeal)) {
++pairs;
outFS << "Found Pair!! ";
}
else {
outFS << " ";
}
if (outputHands == "Yes") {
outFS  << theDeal << endl;
}
}

cout << "Chances of receiving a pair in a hand of " << numCards << " cards is: " << monteCarlo(pairs, numDeals) << "%" << endl;

outFS.close();

return 0;
}

bool hasPair(const vector<Card> &theDeal) {
bool pair = false;
for (unsigned i = 0; i < theDeal.size(); ++i) {
for (unsigned j = i + 1; j < theDeal.size(); ++j) {
if (theDeal.at(i).getRank() == theDeal.at(j).getRank()) {
pair = true;
}
}
}
return pair;
}

ostream & operator<<(ostream &os, const vector<Card> &theDeal) {

for (unsigned i = 0; i + 1 < theDeal.size(); ++i) {
os << theDeal.at(i) << ", ";
}

os << theDeal.at(theDeal.size() - 1);

return os;
}

double monteCarlo(int pairs, int numDeals) {
return 100.0 * (static_cast<double>(pairs) / numDeals);
}
//CARD.CPP FILE//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#include <iostream>

using namespace std;

#include "Card.h"

Card::Card() {
suit = 'c';
rank = 2;
}

Card::Card(char suitInput, int rankInput) {
suitInput = tolower(suitInput);

if (suitInput == 'c') {
suit = 'c';
}
else if (suitInput == 'd') {
suit = 'd';
}
else if (suitInput == 'h') {
suit = 'h';
}
else if (suitInput == 's') {
suit = 's';
}
else {
suit = 'c';
}

if (rankInput > 13 || rankInput < 1) {
rank = 2;
}
else {
rank = rankInput;
}
}

char Card::getSuit() const {
return suit;
}

int Card::getRank() const {
return rank;
}

ostream & operator<<(ostream &os, const Card &rhs) {
string fullSuit;
string rankWord;

if (rhs.rank == 1) {
os << "Ace";
}
else if (rhs.rank == 11) {
os << "Jack";
}
else if (rhs.rank == 12) {
os << "Queen";
}
else if (rhs.rank == 13) {
os << "King";
}
else {
os << rhs.rank;
}

if (rhs.suit == 'c') {
fullSuit = "Clubs";
}
else if (rhs.suit == 'd') {
fullSuit = "Diamonds";
}
else if (rhs.suit == 'h') {
fullSuit = "Hearts";
}
else if (rhs.suit == 's') {
fullSuit = "Spades";
}

os << " of " << fullSuit;

return os;
}
//DECK.CPP////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#include <iostream>
#include <algorithm>

using namespace std;

#include "Deck.h"
#include "Card.h"

Deck::Deck() {
vector <char> suitName;

suitName.push_back('s');
suitName.push_back('h');
suitName.push_back('d');
suitName.push_back('c');

for (unsigned i = 0; i < 4; ++i) {
for (unsigned j = 13; j > 0; --j) {
theDeck.push_back(Card(suitName.at(i), j));
}
}
}

Card Deck::dealCard() {
Card topCard = theDeck.at(theDeck.size() - 1);

dealtCards.push_back(topCard);
theDeck.pop_back();

return topCard;
}

void Deck::shuffleDeck() {
for (unsigned i = 0; i < dealtCards.size(); ++i) {
theDeck.push_back(dealtCards.at(i));
}
dealtCards.clear();
random_shuffle(theDeck.begin(), theDeck.end());
}

unsigned Deck::deckSize() const {
return theDeck.size();
}
//DECK.H FILE/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef __DECK_H__
#define __DECK_H__

#include <vector>
using namespace std;

#include "Card.h"

class Deck {
 private:
    vector<Card> theDeck;
    vector<Card> dealtCards;
 public:
    /* Constructs a Deck of 52 cards:
       Ace, 2, 3, 4, 5, 6, 7, 8, 9, 10, Jack, Queen, King of each suit.
       Cards should start off in this order with the order of suits being:
       Clubs, Diamonds, Hearts, Spades. So, the Card at the top of the
       Deck should be the Ace of Clubs.
       
       For best efficiency, the top of Deck should be stored at 
       back end of vector.*/
    Deck();

    /* Deals (returns) the top card of the deck. 
       Removes this card from theDeck and places it in dealtCards.
       As mentioned in comments for the constructor, 
       for best efficiency, the top card should come from the 
       back end of vector.*/
    Card dealCard();


    /* Places all cards back into theDeck and shuffles them into random order.
       Use random_shuffle function from algorithm library.
       To pass test harness, this function must go forward through dealtCards
       pushing each Card onto the back end of theDeck, then clear dealtCards.
       Do not use pop_back on dealtCards.*/
    void shuffleDeck();


    /* returns the size of the Deck (how many cards have not yet been dealt).*/
    unsigned deckSize() const;
};

#endif

//CARD.H file/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Card interface file
#ifndef __CARD_H__
#define __CARD_H__

#include <iostream>

using namespace std;

class Card {
 private:
    char suit;
    int rank;
 public:
 
    /* Assigns a default value of 2 of Clubs*/
    Card();


    /* Assigns the Card the suit and rank provided.
       suits: c = Clubs, d = Diamonds, h = Hearts, s = Spades
       If an invalid suit is provided, sets the suit to Clubs
       ranks: 1 - 13 (1 = Ace, 11 = Jack, 12 = Queen, 13 = King)
       If an invalid rank is provided, sets the rank to 2
       Accepts lower or upper case characters for sui*/
    Card(char, int);


    /* Returns the Card's suit*/
    char getSuit() const;
    
    
    /* Returns the Card's rank as an integer*/
    int getRank() const;
    
    /* Outputs a Card in the following format: Rank of Suit
       For example, if the rank is 3 and the suit is h: 3 of Hearts
       Or, if the rank is 1 and the suit is d: Ace of Diamonds
       Or, if the rank is 12 and the suit is c: Queen of Clubs
       etc.*/

    friend ostream & operator<<(ostream &, const Card &);
};

#endif
