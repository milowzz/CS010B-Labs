#include "IntList.h"
#ifndef INTLIST
#define INTLIST
#include <iostream>
using namespace std;

IntList::IntList(){

    head = nullptr;
    tail = nullptr;

}

IntList::~IntList(){
    clear();
}

void IntList::pop_front(){
    if (!empty()) {

        IntNode* temp = head;
        head = head->next;
        // Deallocate memory for the saved node
        delete temp;

        // If head is now nullptr, update tail to nullptr as well
        if (head == nullptr) {
        tail = nullptr;
        }
       
    }

    else {
          return;
    }
}


const int& IntList::front() const{
    if(empty())
    {
        exit(1);
    }
    return head->value;

}

const int& IntList::back() const{
    if(empty()){
        exit(1);
    }

    IntNode* current = head;
        while (current->next != nullptr) {
            current = current->next;
        }

        // Returning a reference to the last value
        return current->value;

    
}


void IntList::push_front(int value){ //FIXME

    if(empty()){
       this->head = this->tail = new IntNode(value);
    }
    else {
        IntNode* temp = new IntNode(value);
        temp->next = this->head;
        this->head =temp;
    }
   

    /*IntNode* Newnode = new IntNode(value);
    Newnode->next = head;
    head = Newnode;

    IntNode* t = head;
    head = new IntNode(num);
    head->next = t;
    */
    
}

bool IntList::empty() const{
     return (head == nullptr && tail == nullptr);
}

void IntList::clear(){
 
while (head != nullptr) {
    pop_front();
}
head = nullptr;
tail = nullptr;






   /* while (head != nullptr) {
        IntNode* temp = head;  // Save the current head
        head = head->next;     // Move head to the next node
        delete temp;           // Deallocate memory for the saved node
    }

    // After clearing list, head and tail = nullptr
    head = nullptr;
    tail = nullptr;
    */
}

ostream & operator<<(ostream &out, const IntList &list){
  if(list.empty())
    {
        return out;
    }
   IntNode* temp = list.head;
  
   if(temp->next == nullptr)
       {
           out << temp->value;
       }
   while(temp->next != nullptr)
    {
       out << temp->value << " ";
       temp = temp->next; 
       if(temp->next == 0)
       {
           out << temp->value;
       }
    }
    
   return out; 
}

IntList::IntList(const IntList &cpy)
{
    head = nullptr;
    tail = nullptr;
    for(IntNode* t = cpy.head; t != nullptr; t = t->next)
    {
        push_back(t->value);
    }

}

IntList& IntList::operator=(const IntList &rhs)
{   
    if(this != &rhs)
    {
        clear();
    
    if(rhs.empty())
    {
        head = 0;
        tail = 0;
    }
    for(IntNode* t = rhs.head; t != nullptr; t = t->next)
    {
        push_back(t->value);
    }
    }
    return *this;
}

void IntList::selection_sort()
{
    IntNode* t = head;
    while(t != nullptr)
    {
        IntNode* m = t;
        IntNode* rep = t->next;

        while(rep != nullptr)
        {
            if(m->value > rep ->value)
            {
                m = rep;
            }
            rep = rep->next;
        }
        int temp = t->value;
        t->value = m->value;
        m->value = temp;
        
        tail = t;
        t = t->next;
    }
    
    
}
void IntList::insert_ordered(int value){
    IntNode* t = head;
    if(head == nullptr)
    {
        tail = head;
        push_back(value);
    }
    else if(head->value >= value)
    {
        tail = head;
        push_front(value);
    }
    else if(back() <= value)
    {
        push_back(value);
    }
    else
    {
        while(t != nullptr)
        {
            IntNode* nextval = t->next;
            if(t-> value < value && nextval->value > value)
            {
                IntNode* rep = new IntNode(value);
                rep->next = nextval;
                t->next = rep;
                break;
            }
            else if(t-> value == value)
            {
                IntNode* rep = new IntNode(value);
                rep->next = nextval;
                t->next = rep;
                break;
            }
            else
            {
                t = t->next;
            }
            
        }
    }
}

void IntList::remove_duplicates()
{
    IntNode* pot_copy = 0;
    IntNode* previous = head;
    for(IntNode* t = head; t != nullptr; t= t->next)
    {
        pot_copy = t->next; 
        previous = t;
        while(pot_copy!=nullptr)
        {
            if(pot_copy->value == t->value)
            {
               // cout << "match" << endl;
                IntNode* trash = pot_copy;
                
                    previous->next = pot_copy->next;
                    pot_copy = pot_copy->next;
                    delete trash;
                
                
            }
            else
            {
                pot_copy = pot_copy->next;
                previous = previous->next; 
            }
            
        }
    }
}

#endif

